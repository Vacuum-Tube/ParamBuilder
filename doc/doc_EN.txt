I would like to introduce my Mod Tool ParamBuilder.
This allows modders to define UI parameters (constructions and mod settings) very quickly and easily.
The API simplifies both the creation of the parameters and the reading of the values.


Parameter basics

You can specify UI parameters for constructions (in the .con), and since the June update, mod parameters are possible (defined in mod.lua).
Both have basically the same structure and are therefore considered together here (there are still a few differences).
The definition and use of the parameters is documented here:
https://www.transportfever.net/lexicon/index.php?entry/278-parameter-types-in-constructions/
https://www.transportfever2.com/wiki/doku.php?id=modding:constructionbasics#parameters

There are 5 different UI types. You have to provide a unique key, a name and the values. Optional DefaultIndex and Tooltip.

The updateFn then contains the selected value in the params (or the modparams in the runFn). Only the index is included here, modders still have to determine the values ​​from it and make case distinctions. With the mod settings, there is also the fact that the validity has to be checked several times because the table for the mod or key is not always included.


Why ParamBuilder?
-Parameters for constructions and mod settings
-Easy to use API that takes care of everything
-One-line-code: definition, transfer, getValue
-Parameters are more accessible even for modders with less experience
-Direct return of the relevant values
-Failback queries with default values
-Easy specification of number ranges (useful for sliders)
-Only necessary arguments
-Code becomes shorter and clearer


Integration

The file must be located in the mod at: res/scripts/parambuilder_v1.lua
The file must not be changed, otherwise there will be compatibility problems!

In the file in which the parameters are used, ParamBuilder is integrated as follows:
local ParamBuilder = require "parambuilder_v1"


Syntax definition

A local variable is created for each parameter: local myparam = ...
The following still applies: keys must be totally unique, even across mods!
Duplicate keys lead to undefined behavior. Although the mod settings are structured for mod own keys, these should not have too general names either, as a bug sometimes overwrites the settings of other mods.

Name must also be specified for all types and is displayed above the element. Can/should therefore be translated with strings.lua.

* are optional arguments
If you want to leave out an argument, write nil there.

Button
ParamBuilder.Button(key, name, values, *defIdx, *tooltip, *valuesTxt)
With values ​​you specify a table that contains the selection options. The elements can have any data type (string, number, ...) and are later returned with getValue. By default, these values ​​are also displayed in the UI (with tostring), if valuesTxt is specified, these values ​​are displayed instead.
defIdx is the index (0,1,...) that is selected at the start. Default: 0

Combobox
ParamBuilder.Combobox(key, name, values, *defIdx, *tooltip, *valuesTxt)
Basically works like Button. In contrast to this, the UI considers case-sensitivity here. It's a dropdown menu and therefore suitable for many elements or longer descriptions.

Slider
ParamBuilder.Slider(key, name, values, *defIdx, *tooltipORvandef, *valuesTxt)
With a slider, the values ​​are displayed to the right of it, depending on the selection position. Works well for numeric values, so it's useful to use ParamBuilder.range for values.
If you want to specify a default value, you may have to do some math.
There are multiple options for the tooltip (preview above the parameter name), depending on the data type of tooltipORvandef.
string: is directly set to the Tooltip
true: "Mod Default: <defaultValue>" 
number: "Vanilla Default: <number>" + ModDefault (like above)
The last two are suitable for mod settings that change game config values.

IconButton
ParamBuilder.IconButton(key, name, icons, *values, *defIdx, *tooltip)
icons contains a list with the paths to the .tga files.
With values you can specify a list of what will be used later (e.g. mdl files).

Checkbox
ParamBuilder.Checkbox(key, name, *defaultCheck)
defaultCheck is specified with true/false. Default: true
The easiest way for value return is with getBool


More functions

Number range
ParamBuilder.range(start, end, *step)
Returns a linear range of numbers as a table. Start and end are always included.

String conversion
ParamBuilder.strValues(values)
Converts all values ​​of the given table to strings.


Parameter specification

The information that the game needs for definition is stored in the field "params" and is transferred as follows:
params = {
	myparam1.params,
	myparam2.params,
},


Determination of values

In updateFn(params), the actual values ​​can be determined using the current params.
In the (post)runFn the modparams are passed as the 2nd argument. You can get the params for your own mod with:
local params = modparams[getCurrentModId()]

myparam.getIndex(params)
Returns the pure index of the defined key.

myparam.getBool(params)
Returns the corresponding truth value (>0). Useful for checkboxes.

myparam.getValue(params)
Determines the actual value. This probably the function, you will use mostly.

On all determinations, there are verifications, so that unexpected data does not result in error.
E.g. if the key is not contained, a message is printed in the stdout and the default value is returned.
Problems like this can arise with the mod parameters in particular, as the default value does not work there and the params for the mod can be completely missing. Only when you change something in the settings, values ​​are set and no more warnings are printed.